{"version":3,"file":"ripple.d.ts","sources":["ripple.d.ts"],"names":[],"mappingssourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Platform } from '@angular/cdk/platform';\nimport { ElementRef, InjectionToken, NgZone, OnDestroy, OnInit } from '@angular/core';\nimport { RippleRef } from './ripple-ref';\nimport { RippleAnimationConfig, RippleConfig, RippleTarget } from './ripple-renderer';\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n    /**\n     * Whether ripples should be disabled. Ripples can be still launched manually by using\n     * the `launch()` method. Therefore focus indicators will still show up.\n     */\n    disabled?: boolean;\n    /**\n     * Configuration for the animation duration of the ripples.\n     * There are two phases with different durations for the ripples.\n     */\n    animation?: RippleAnimationConfig;\n    /**\n     * If set, the default duration of the fade-in animation is divided by this value. For example,\n     * setting it to 0.5 will cause the ripple fade-in animation to take twice as long.\n     * A changed speedFactor will not affect the fade-out duration of the ripples.\n     * @deprecated Use the `animation` global option instead.\n     * @deletion-target 7.0.0\n     */\n    baseSpeedFactor?: number;\n    /**\n     * Whether ripples should start fading out immediately after the mouse our touch is released. By\n     * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n     */\n    terminateOnPointerUp?: boolean;\n}\n/** Injection token that can be used to specify the global ripple options. */\nexport declare const MAT_RIPPLE_GLOBAL_OPTIONS: InjectionToken<RippleGlobalOptions>;\nexport declare class MatRipple implements OnInit, OnDestroy, RippleTarget {\n    private _elementRef;\n    private _animationMode;\n    /** Custom color for all ripples. */\n    color: string;\n    /** Whether the ripples should be visible outside the component's bounds. */\n    unbounded: boolean;\n    /**\n     * Whether the ripple always originates from the center of the host element's bounds, rather\n     * than originating from the location of the click event.\n     */\n    centered: boolean;\n    /**\n     * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n     * will be the distance from the center of the ripple to the furthest corner of the host element's\n     * bounding rectangle.\n     */\n    radius: number;\n    /**\n     * If set, the normal duration of ripple animations is divided by this value. For example,\n     * setting it to 0.5 will cause the animations to take twice as long.\n     * A changed speedFactor will not modify the fade-out duration of the ripples.\n     * @deprecated Use the [matRippleAnimation] binding instead.\n     * @deletion-target 7.0.0\n     */\n    speedFactor: number;\n    /**\n     * Configuration for the ripple animation. Allows modifying the enter and exit animation\n     * duration of the ripples.\n     */\n    animation: RippleAnimationConfig;\n    /**\n     * Whether click events will not trigger the ripple. Ripples can be still launched manually\n     * by using the `launch()` method.\n     */\n    disabled: boolean;\n    private _disabled;\n    /**\n     * The element that triggers the ripple when click events are received.\n     * Defaults to the directive's host element.\n     */\n    trigger: HTMLElement;\n    private _trigger;\n    /** Renderer for the ripple DOM manipulations. */\n    private _rippleRenderer;\n    /** Options that are set globally for all ripples. */\n    private _globalOptions;\n    /** Whether ripple directive is initialized and the input bindings are set. */\n    private _isInitialized;\n    constructor(_elementRef: ElementRef, ngZone: NgZone, platform: Platform, globalOptions: RippleGlobalOptions, _animationMode?: string | undefined);\n    ngOnInit(): void;\n    ngOnDestroy(): void;\n    /** Fades out all currently showing ripple elements. */\n    fadeOutAll(): void;\n    /** Ripple configuration from the directive's input values. */\n    readonly rippleConfig: RippleConfig;\n    /** Whether ripples on pointer-down are disabled or not. */\n    readonly rippleDisabled: boolean;\n    /** Sets up the the trigger event listeners if ripples are enabled. */\n    private _setupTriggerEventsIfEnabled();\n    /**\n     * Launches a manual ripple using the specified ripple configuration.\n     * @param config Configuration for the manual ripple.\n     */\n    launch(config: RippleConfig): RippleRef;\n    /**\n     * Launches a manual ripple at the specified coordinates within the element.\n     * @param x Coordinate within the element, along the X axis at which to fade-in the ripple.\n     * @param y Coordinate within the element, along the Y axis at which to fade-in the ripple.\n     * @param config Optional ripple configuration for the manual ripple.\n     */\n    launch(x: number, y: number, config?: RippleConfig): RippleRef;\n}\n"]}