{"version":3,"file":"progress-bar.js","sources":["../../../src/lib/progress-bar/progress-bar.ts","../../../src/lib/progress-bar/progress-bar-module.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Inject,\n  Input,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, mixinColor} from '@angular/material/core';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nexport class MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\nexport const _MatProgressBarMixinBase = mixinColor(MatProgressBarBase, 'primary');\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor {\n\n\n  constructor(public _elementRef: ElementRef,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(_elementRef);\n  }\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) { this._value = clamp(v || 0); }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** The id of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n"]}