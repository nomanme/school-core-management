{"version":3,"file":"expansion.js","sources":["../../../src/lib/expansion/accordion.ts","../../../src/lib/expansion/expansion-animations.ts","../../../src/lib/expansion/expansion-panel-content.ts","../../../src/lib/expansion/expansion-panel.ts","../../../src/lib/expansion/expansion-panel-header.ts","../../../src/lib/expansion/expansion-module.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * The display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the reset of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  animateChild,\n  group,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/** Animations used by the Material expansion panel. */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed', group([\n      query('@indicatorRotate', animateChild(), {optional: true}),\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ])),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  SimpleChanges,\n  SkipSelf,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {filter, startWith, take} from 'rxjs/operators';\nimport {MatAccordion} from './accordion';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\n\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  providers: [\n    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n    // to the same accordion.\n    {provide: MatAccordion, useValue: undefined},\n  ],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem\n    implements AfterContentInit, OnChanges, OnDestroy {\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordion;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  constructor(@Optional() @SkipSelf() accordion: MatAccordion,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n  }\n\n  /** Whether the expansion indicator should be hidden. */\n  _getHideToggle(): boolean {\n    if (this.accordion) {\n      return this.accordion.hideToggle;\n    }\n    return this.hideToggle;\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._inputChanges.complete();\n  }\n\n  _bodyAnimation(event: AnimationEvent) {\n    const classList = event.element.classList;\n    const cssClass = 'mat-expanded';\n    const {phaseName, toState} = event;\n\n    // Toggle the body's `overflow: hidden` class when closing starts or when expansion ends in\n    // order to prevent the cases where switching too early would cause the animation to jump.\n    // Note that we do it directly on the DOM element to avoid the slight delay that comes\n    // with doing it via change detection.\n    if (phaseName === 'done' && toState === 'expanded') {\n      classList.add(cssClass);\n    } else if (phaseName === 'start' && toState === 'collapsed') {\n      classList.remove(cssClass);\n    }\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, Subscription} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanel} from './expansion-panel';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'panel.disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n    @Host() public panel: MatExpansionPanel,\n    private _element: ElementRef,\n    private _focusMonitor: FocusMonitor,\n    private _changeDetectorRef: ChangeDetectorRef) {\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to  subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(\n      panel.opened,\n      panel.closed,\n      panel._inputChanges.pipe(filter(changes => !!(changes.hideToggle || changes.disabled)))\n    )\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    _focusMonitor.monitor(_element.nativeElement);\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    this.panel.toggle();\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        event.preventDefault();\n        this._toggle();\n        break;\n      default:\n        return;\n    }\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host : {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host : {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n})\nexport class MatExpansionModule {}\n"]}